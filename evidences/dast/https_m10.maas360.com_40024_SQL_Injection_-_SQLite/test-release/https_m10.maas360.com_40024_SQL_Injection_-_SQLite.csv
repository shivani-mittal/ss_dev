uri,method,param,attack,evidence,otherinfo,pluginid,alertRef,alert,name,riskcode,confidence,riskdesc,desc,solution,reference,cweid,wascid,sourceid
"https://m10.maas360.com/emc/","GET","Accept","case randomblob(10000000) when not null then 1 else 1 end ","The query time is controllable using parameter value [case randomblob(10000000) when not null then 1 else 1 end ]\, which caused the request to take [1\,427] milliseconds\, parameter value [case randomblob(100000000) when not null then 1 else 1 end ]\, which caused the request to take [3\,549] milliseconds\, when the original unmodified query with value [*/*] took [552] milliseconds.","The query time is controllable using parameter value [case randomblob(10000000) when not null then 1 else 1 end ]\, which caused the request to take [1\,427] milliseconds\, parameter value [case randomblob(100000000) when not null then 1 else 1 end ]\, which caused the request to take [3\,549] milliseconds\, when the original unmodified query with value [*/*] took [552] milliseconds.","40024","40024","SQL Injection - SQLite","SQL Injection - SQLite","3","2","High (Medium)","SQL injection may be possible. ","Do not trust client side input\, even if there is client side validation in place. In general\, type check all data on the server side. If the application uses JDBC\, use PreparedStatement or CallableStatement\, with parameters passed by '?' If the application uses ASP\, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used\, use them. Do *not* concatenate strings into queries in the stored procedure\, or use 'exec'\, 'exec immediate'\, or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters\, or a 'deny list' of disallowed characters in user input. Apply the principle of least privilege by using the least privileged database user possible. In particular\, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection\, but minimizes its impact. Grant the minimum database access that is necessary for the application. ","https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html ","[89](https://cwe.mitre.org/data/definitions/89.html)","19","3524"
"https://m10.maas360.com/emc/","GET","emc","case randomblob(10000000) when not null then 1 else 1 end ","The query time is controllable using parameter value [case randomblob(10000000) when not null then 1 else 1 end ]\, which caused the request to take [1\,086] milliseconds\, parameter value [case randomblob(100000000) when not null then 1 else 1 end ]\, which caused the request to take [1\,200] milliseconds\, when the original unmodified query with value [emc] took [326] milliseconds.","The query time is controllable using parameter value [case randomblob(10000000) when not null then 1 else 1 end ]\, which caused the request to take [1\,086] milliseconds\, parameter value [case randomblob(100000000) when not null then 1 else 1 end ]\, which caused the request to take [1\,200] milliseconds\, when the original unmodified query with value [emc] took [326] milliseconds.","40024","40024","SQL Injection - SQLite","SQL Injection - SQLite","3","2","High (Medium)","SQL injection may be possible. ","Do not trust client side input\, even if there is client side validation in place. In general\, type check all data on the server side. If the application uses JDBC\, use PreparedStatement or CallableStatement\, with parameters passed by '?' If the application uses ASP\, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used\, use them. Do *not* concatenate strings into queries in the stored procedure\, or use 'exec'\, 'exec immediate'\, or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters\, or a 'deny list' of disallowed characters in user input. Apply the principle of least privilege by using the least privileged database user possible. In particular\, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection\, but minimizes its impact. Grant the minimum database access that is necessary for the application. ","https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html ","[89](https://cwe.mitre.org/data/definitions/89.html)","19","3524"
"https://m10.maas360.com/emc/","GET","query","case randomblob(100000) when not null then 1 else 1 end ","The query time is controllable using parameter value [case randomblob(100000) when not null then 1 else 1 end ]\, which caused the request to take [342] milliseconds\, parameter value [case randomblob(1000000) when not null then 1 else 1 end ]\, which caused the request to take [1\,187] milliseconds\, when the original unmodified query with value [query] took [322] milliseconds.","The query time is controllable using parameter value [case randomblob(100000) when not null then 1 else 1 end ]\, which caused the request to take [342] milliseconds\, parameter value [case randomblob(1000000) when not null then 1 else 1 end ]\, which caused the request to take [1\,187] milliseconds\, when the original unmodified query with value [query] took [322] milliseconds.","40024","40024","SQL Injection - SQLite","SQL Injection - SQLite","3","2","High (Medium)","SQL injection may be possible. ","Do not trust client side input\, even if there is client side validation in place. In general\, type check all data on the server side. If the application uses JDBC\, use PreparedStatement or CallableStatement\, with parameters passed by '?' If the application uses ASP\, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used\, use them. Do *not* concatenate strings into queries in the stored procedure\, or use 'exec'\, 'exec immediate'\, or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters\, or a 'deny list' of disallowed characters in user input. Apply the principle of least privilege by using the least privileged database user possible. In particular\, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection\, but minimizes its impact. Grant the minimum database access that is necessary for the application. ","https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html ","[89](https://cwe.mitre.org/data/definitions/89.html)","19","3524"
